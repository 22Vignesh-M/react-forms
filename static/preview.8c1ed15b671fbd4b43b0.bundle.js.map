{"version":3,"file":"static/preview.8c1ed15b671fbd4b43b0.bundle.js","sources":["webpack:///./src/core/BaseElementWidget.ts"],"sourcesContent":["import { BaseWidget, BaseWidgetProps } from \"@projectstorm/react-core\";\n\nexport interface BaseElementWidgetProps<Type> extends BaseWidgetProps {\n\tname?: any;\n\tvalue?: Type | null;\n\tvalueChangedEvent?: (value: Type) => any;\n\tallowValueOverride?: boolean;\n\tchildren?: any;\n\tlabel?: any;\n\tdisplayLabel?: boolean;\n}\n\nexport interface BaseElementWidgetState<Type> {\n\tvalue: Type | null;\n\tresetValue: Type | null;\n}\n\nexport class BaseElementWidget<\n\tType,\n\tP extends BaseElementWidgetProps<Type>,\n\tS extends BaseElementWidgetState<Type>\n> extends BaseWidget<P, S> {\n\tpublic static defaultProps: BaseElementWidgetProps<any> = {\n\t\tname: \"\",\n\t\tallowValueOverride: true,\n\t\tdisplayLabel: true\n\t};\n\n\tstate: S;\n\n\tconstructor(name: string, props: P) {\n\t\tsuper(name, props);\n\t\t(this.state as any) = {\n\t\t\tvalue: props.value || null,\n\t\t\tresetValue: props.value || null\n\t\t};\n\t}\n\n\t/**\n\t * Helper method for getting the label for this component\n\t * @param props\n\t * @returns {any|string}\n\t */\n\tstatic getLabel(props: BaseElementWidgetProps<any>) {\n\t\tif (!props.displayLabel) {\n\t\t\treturn null;\n\t\t}\n\t\treturn props.label || props.name.charAt(0).toUpperCase() + props.name.slice(1);\n\t}\n\n\tgetValue(): any {\n\t\treturn this.state.value;\n\t}\n\n\tresetValue() {\n\t\tthis.setValue(this.state.resetValue);\n\t}\n\n\tcomponentWillReceiveProps(next: P) {\n\t\tif ((this.props.allowValueOverride || next.allowValueOverride) && next.value !== undefined) {\n\t\t\tthis.setValue(next.value, false);\n\t\t}\n\t}\n\n\tcleanValue(value: any) {\n\t\tif (value === \"\") {\n\t\t\treturn null;\n\t\t}\n\t\tif (value === undefined) {\n\t\t\treturn null;\n\t\t}\n\t\treturn value;\n\t}\n\n\tsetValue(value: Type | null, fireEvent: boolean = true, additionalState: any = {}) {\n\t\tvalue = this.cleanValue(value);\n\t\tthis.setState({ ...additionalState, value: value }, () => {\n\t\t\tif (fireEvent && this.props.valueChangedEvent) {\n\t\t\t\tthis.props.valueChangedEvent(value);\n\t\t\t}\n\t\t});\n\t}\n}\n"],"mappings":"AAAA","sourceRoot":""}